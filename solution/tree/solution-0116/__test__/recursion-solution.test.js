const TreeLinkNode = require('../data-structure/TreeLinkNode');
const { solution } = require('../solutions/recursion-solution');

describe('It should normally link to sibling nodes', () => {
  it('should normally detail 0 node tree', () => {
    let root = null;
    expect(solution(root)).toBe(null);
  });
  it('should normally detail 1 node tree', () => {
    let root = new TreeLinkNode(1);
    let processedRoot = solution(root);
    expect(processedRoot.val).toBe(1);
    expect(processedRoot.next).toBe(null);
    expect(processedRoot.left).toBe(null);
    expect(processedRoot.right).toBe(null);
  });
  it('should normally detail 3 node tree', () => {
    let root = new TreeLinkNode(1);
    root.left = new TreeLinkNode(2);
    root.right = new TreeLinkNode(3);
    let processedRoot = solution(root);
    expect(processedRoot.val).toBe(1);
    expect(processedRoot.left.val).toBe(2);
    expect(processedRoot.right.val).toBe(3);
    expect(processedRoot.next).toBe(null);
    expect(processedRoot.left.next).toBe(processedRoot.right);
    expect(processedRoot.right.next).toBe(null);
  });
  it('should normally detail 7 node tree', () => {
    let root = new TreeLinkNode(1);
    root.left = new TreeLinkNode(2);
    root.right = new TreeLinkNode(3);
    root.left.left = new TreeLinkNode(4);
    root.left.right = new TreeLinkNode(5);
    root.right.left = new TreeLinkNode(6);
    root.right.right = new TreeLinkNode(7);
    let processedRoot = solution(root);
    expect(processedRoot.val).toBe(1);
    expect(processedRoot.left.val).toBe(2);
    expect(processedRoot.right.val).toBe(3);
    expect(processedRoot.left.left.val).toBe(4);
    expect(processedRoot.left.right.val).toBe(5);
    expect(processedRoot.right.left.val).toBe(6);
    expect(processedRoot.right.right.val).toBe(7);
    expect(processedRoot.next).toBe(null);
    expect(processedRoot.left.next).toBe(processedRoot.right);
    expect(processedRoot.right.next).toBe(null);
    expect(processedRoot.left.left.next).toBe(processedRoot.left.right);
    expect(processedRoot.left.right.next).toBe(processedRoot.right.left);
    expect(processedRoot.right.left.next).toBe(processedRoot.right.right);
    expect(processedRoot.right.right.next).toBe(null);
  });
  it('should normally detail 15 node tree', () => {
    let root = new TreeLinkNode(1);
    root.left = new TreeLinkNode(2);
    root.right = new TreeLinkNode(3);
    root.left.left = new TreeLinkNode(4);
    root.left.right = new TreeLinkNode(5);
    root.right.left = new TreeLinkNode(6);
    root.right.right = new TreeLinkNode(7);
    root.left.left.left = new TreeLinkNode(8);
    root.left.left.right = new TreeLinkNode(9);
    root.left.right.left = new TreeLinkNode(10);
    root.left.right.right = new TreeLinkNode(11);
    root.right.left.left = new TreeLinkNode(12);
    root.right.left.right = new TreeLinkNode(13);
    root.right.right.left = new TreeLinkNode(14);
    root.right.right.right = new TreeLinkNode(15);
    let processedRoot = solution(root);
    expect(processedRoot.val).toBe(1);
    expect(processedRoot.left.val).toBe(2);
    expect(processedRoot.right.val).toBe(3);
    expect(processedRoot.left.left.val).toBe(4);
    expect(processedRoot.left.right.val).toBe(5);
    expect(processedRoot.right.left.val).toBe(6);
    expect(processedRoot.right.right.val).toBe(7);
    expect(processedRoot.left.left.left.val).toBe(8);
    expect(processedRoot.left.left.right.val).toBe(9);
    expect(processedRoot.left.right.left.val).toBe(10);
    expect(processedRoot.left.right.right.val).toBe(11);
    expect(processedRoot.right.left.left.val).toBe(12);
    expect(processedRoot.right.left.right.val).toBe(13);
    expect(processedRoot.right.right.left.val).toBe(14);
    expect(processedRoot.right.right.right.val).toBe(15);
    expect(processedRoot.next).toBe(null);
    expect(processedRoot.left.next).toBe(processedRoot.right);
    expect(processedRoot.right.next).toBe(null);
    expect(processedRoot.left.left.next).toBe(processedRoot.left.right);
    expect(processedRoot.left.right.next).toBe(processedRoot.right.left);
    expect(processedRoot.right.left.next).toBe(processedRoot.right.right);
    expect(processedRoot.right.right.next).toBe(null);
    expect(processedRoot.left.left.left.next).toBe(processedRoot.left.left.right);
    expect(processedRoot.left.left.right.next).toBe(processedRoot.left.right.left);
    expect(processedRoot.left.right.left.next).toBe(processedRoot.left.right.right);
    expect(processedRoot.left.right.right.next).toBe(processedRoot.right.left.left);
    expect(processedRoot.right.left.left.next).toBe(processedRoot.right.left.right);
    expect(processedRoot.right.left.right.next).toBe(processedRoot.right.right.left);
    expect(processedRoot.right.right.left.next).toBe(processedRoot.right.right.right);
    expect(processedRoot.right.right.right.next).toBe(null);
  });
});